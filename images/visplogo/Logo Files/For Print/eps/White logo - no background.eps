%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2394 2394
%%HiResBoundingBox: 0 0 2394 2394
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2394 2394 re
W
q
[0.24 0 0 -0.24 0 2394] cm
q
0 0 9975 9975 re
W*
q
[187.50002 0 0 187.50002 300 300] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
50 25 m
50 33.880001 46.380001 40.669998 39.400002 45.110001 c
35.529999 47.580002 29.93 50 25 50 c
16.369999 50 10.76 48.630001 6.270001 42 c
3.57 38 0 30.200001 0 25 c
0 18.15 1.76 10.94 6.22 6.42 c
10.68 1.900001 18.040001 0 25 0 c
34.5 0 41.77 5.3 46 13.11 c
47.880001 16.639999 50 20.689999 50 25 c
h
f
Q
q
[24.162426 0 0 24.162426 3797.5127 3158.6741] cm
93.864998 82.978996 m
96.690994 76.744995 97.289001 71.025993 95.616997 65.927994 c
92.791 57.312996 84.539993 53.591995 83.503998 53.154995 c
79.305 50.456993 65.865997 46.536995 65.293999 46.370995 c
46.501999 40.881996 40.392998 36.521996 38.737999 35.048996 c
38.742001 34.966995 38.743 34.905994 38.743 34.889996 c
38.742001 34.464996 l
8.762 5.849 l
8.275 5.924 l
3.961999 6.59 3.132 10.792999 3.099 10.971 c
3 11.502 l
33.823997 41.091999 l
34.032997 41.008999 l
35.989998 43.103001 40.577995 49.308998 46.990997 66.084 c
47.202999 66.642998 52.196999 79.722 55.225998 83.688995 c
55.745998 84.685997 60.119999 92.609993 68.935997 94.729996 c
70.360001 95.072998 71.815994 95.243996 73.301994 95.243996 c
77.418991 95.243996 81.770996 93.925995 86.311996 91.314995 c
86.481995 91.434998 86.724998 91.543991 87.058998 91.543991 c
88.417999 91.543991 90.591995 89.372993 91.462997 88.439987 c
94.014 85.71199 94.823997 83.876984 93.868996 82.981987 c
93.869003 82.981003 93.866997 82.980003 93.864998 82.978996 c
h
69.422997 92.791 m
61.120995 90.805 57.008995 82.783997 56.968994 82.704002 c
56.862995 82.536003 l
54.024994 78.900002 48.912994 65.508003 48.860996 65.371002 c
45.186996 55.760002 42.072998 49.510002 39.654995 45.466003 c
42.685993 49.493004 46.891994 55.695004 52.019997 64.802002 c
52.342999 65.445 60.009995 80.590004 67.252998 85.904999 c
67.400002 86.015999 70.917999 88.653 75.528 90.254997 c
77.691002 91.004997 79.724998 91.386993 81.620003 91.425995 c
77.292999 93.234001 73.211998 93.695999 69.422997 92.791 c
h
86.439003 88.473999 m
78.856003 92.023003 68.575005 84.396996 68.448006 84.300003 c
61.581005 79.262001 53.884007 64.057007 53.784004 63.862003 c
49.407005 56.087002 45.710003 50.413002 42.815002 46.371002 c
47.650002 51.500004 53.827003 58.647003 58.746002 66.318001 c
59.033001 66.781998 65.875999 77.738998 74.600998 82.244003 c
74.933998 82.438004 81.568001 86.279007 87 87.635002 c
86.782997 87.93 86.598999 88.209 86.439003 88.473999 c
h
75.564003 80.491997 m
67.291 76.218994 60.514004 65.375 60.438004 65.251999 c
56.039001 58.392998 50.663002 51.959 46.093002 46.966999 c
51.450001 51.131001 58.331001 55.999001 65.564003 59.849998 c
65.678001 59.907997 77.034004 65.784996 81.988998 73.727997 c
82.043999 73.806 86.882996 80.789993 88.345001 85.888 c
83.140999 84.876999 75.688004 80.563004 75.564003 80.491997 c
h
90.889999 83.641998 m
90.573997 83.879997 90.261002 84.134995 89.968002 84.397995 c
88.157005 79.117996 83.854004 72.904999 83.658005 72.626999 c
78.434006 64.251999 66.962006 58.318001 66.490005 58.077 c
58.431007 53.785999 50.799004 48.200001 45.293007 43.792 c
49.564007 46.355 55.534008 49.59 63.668007 53.337997 c
63.827007 53.401997 79.602005 59.841999 85.19101 66.295998 c
85.288002 66.403999 93.571999 75.836998 90.889999 83.641998 c
h
91.688004 72.860001 m
89.720001 68.393997 86.807007 65.101997 86.694 64.974998 c
80.802002 58.171997 65.086998 51.752998 64.464005 51.501999 c
54.958004 47.120998 48.429005 43.427998 44.164005 40.730999 c
48.391006 42.813 54.870007 45.409 64.735001 48.291 c
64.874001 48.331001 78.634003 52.344002 82.487 54.877998 c
82.664001 54.970997 l
82.748001 55.004997 91.052002 58.422997 93.718002 66.551994 c
94.932999 70.254997 94.806 74.363991 93.351006 78.828995 c
93.155998 76.945999 92.609001 74.950996 91.688004 72.860001 c
h
f
Q
q
[22.53607 0 0 22.53607 1890.2073 5795.0259] cm
3.9844 40 m
3.9844 12.148001 l
8.6524 12.148001 l
8.6524 40 l
3.9844 40 l
3.9844 40 l
h
36.347118 12.148 m
41.015118 12.148 l
41.015118 40 l
35.780716 40 l
22.108715 18.75 l
22.108715 40 l
17.479815 40 l
17.479815 12.148001 l
22.655615 12.148001 l
36.346615 33.261002 l
36.346615 12.148001 l
36.347118 12.148 l
h
58.787422 40.37109 m
52.889023 40.37109 48.474422 37.55859 47.576424 32.636688 c
52.381123 31.523388 l
52.888931 34.726486 55.525623 36.484287 58.963123 36.484287 c
61.677925 36.484287 64.138924 35.331985 64.099823 32.402287 c
64.06076 29.355387 60.681824 28.476486 57.029522 27.441387 c
52.810722 26.210888 48.474823 24.804688 48.474823 19.687487 c
48.474823 14.492187 52.732624 11.757787 58.025623 11.757787 c
62.908424 11.757787 67.537323 13.808587 68.611626 18.808586 c
64.099922 19.941385 l
63.474922 16.972586 61.170223 15.664085 58.260124 15.664085 c
55.662422 15.664085 53.201523 16.777386 53.201523 19.609386 c
53.201523 22.187487 56.150723 22.988287 59.529625 23.925787 c
63.885124 25.136686 68.924126 26.621086 68.924126 32.207085 c
68.924126 37.968784 64.099922 40.371185 58.787125 40.371185 c
58.787422 40.37109 l
h
91.148949 12.148 m
91.148949 16.308201 l
84.273949 16.308201 l
84.273949 39.999199 l
79.625549 39.999199 l
79.625549 16.308199 l
72.731049 16.308199 l
72.731049 12.147999 l
91.149048 12.147999 l
91.148949 12.148 l
h
115.211311 40 m
113.004311 33.808601 l
100.836311 33.808601 l
98.648811 40 l
93.824608 40 l
104.078606 12.148001 l
109.762207 12.148001 l
120.016205 40 l
115.211502 40 l
115.211311 40 l
h
102.261711 29.805 m
111.59761 29.805 l
106.929611 16.641001 l
102.261711 29.805 l
h
140.659454 40 m
133.432861 27.577999 l
130.425064 27.577999 l
130.425064 40 l
125.757065 40 l
125.757065 12.148001 l
135.425064 12.148001 l
141.460266 12.148001 144.11647 15.761301 144.11647 20.233902 c
144.11647 24.120602 141.811768 26.737803 138.120377 27.401901 c
146.147675 39.999901 l
140.659378 39.999901 l
140.659454 40 l
h
130.424759 16.094 m
130.424759 24.1213 l
134.741165 24.1213 l
138.159164 24.1213 139.623962 22.519699 139.623962 20.1369 c
139.623962 17.7736 138.159164 16.093899 134.741165 16.093899 c
130.424759 16.093899 l
130.424759 16.094 l
h
167.689209 16.309 m
156.869202 16.309 l
156.869202 24.0238 l
166.439499 24.0238 l
166.439499 28.144899 l
156.869202 28.144899 l
156.869202 35.820698 l
167.689209 35.820698 l
167.689209 40.000397 l
152.142212 40.000397 l
152.142212 12.148397 l
167.689209 12.148397 l
167.689209 16.308598 l
167.689209 16.309 l
h
187.04367 40.37109 m
179.03587 40.37109 172.98067 34.90229 172.98067 26.05509 c
172.98067 17.24649 179.03537 11.75809 187.04367 11.75809 c
192.90308 11.75809 197.70767 14.726891 199.79767 19.707291 c
195.44217 21.367491 l
193.99687 18.027691 190.83276 16.11359 187.04376 16.11359 c
181.77036 16.11359 177.64926 19.78549 177.64926 26.054991 c
177.64926 32.36359 181.77036 36.015892 187.04376 36.015892 c
190.83286 36.015892 193.99686 34.121391 195.44217 30.781492 c
199.79767 32.441692 l
197.70787 37.422192 192.90317 40.371391 187.04367 40.371391 c
187.04367 40.37109 l
h
221.59351 16.309 m
210.7735 16.309 l
210.7735 24.0238 l
220.3438 24.0238 l
220.3438 28.144899 l
210.7735 28.144899 l
210.7735 35.820698 l
221.59351 35.820698 l
221.59351 40.000397 l
206.04651 40.000397 l
206.04651 12.148397 l
221.59351 12.148397 l
221.59351 16.308598 l
221.59351 16.309 l
h
239.89397 12.148 m
245.12837 12.148 248.46817 16.073799 248.46817 20.9175 c
248.46817 25.839399 245.12837 29.6089 239.89397 29.6089 c
233.48767 29.6089 l
233.48767 39.999901 l
228.81967 39.999901 l
228.81967 12.147901 l
239.89368 12.147901 l
239.89397 12.148 l
h
239.15096 25.625 m
242.27596 25.625 243.91655 23.710899 243.91655 20.8594 c
243.91655 18.105499 242.27596 16.0938 239.15096 16.0938 c
233.48686 16.0938 l
233.48686 25.625099 l
239.15096 25.625099 l
239.15096 25.625 l
h
270.22415 12.148 m
270.22415 16.308201 l
263.34915 16.308201 l
263.34915 39.999199 l
258.70074 39.999199 l
258.70074 16.308199 l
251.80624 16.308199 l
251.80624 12.147999 l
270.22424 12.147999 l
270.22415 12.148 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
